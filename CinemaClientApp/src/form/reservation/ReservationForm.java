/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.reservation;

import controler.Controler;
import domain.Member;
import domain.Projection;
import domain.Reservation;
import form.FrmMode;
import form.MainForm;
import form.member.model.TableModelMember;
import form.projection.model.TableModelProjection;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import transfer.Response;
import validator.FormValidator;

/**
 *
 * @author Monika
 */
public class ReservationForm extends javax.swing.JDialog {

    Border border;
    Reservation reservation;
    MainForm mf;
    ViewReservationForm vrf;
    TableModelMember tmm;
    TableModelProjection tmp;

    /**
     * Creates new form ReservationForm
     */
    public ReservationForm(MainForm parent, boolean modal, FrmMode frmMode) {
        super(parent, modal);
        mf = parent;
        initComponents();
        populateTableProjection();
        populateTableMember();
        setScreenCenter();
        adjustForm(frmMode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        panelReservation = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMember = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProjection = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtDiscountPrice = new javax.swing.JTextField();
        txtTickets = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelReservation.setBorder(javax.swing.BorderFactory.createTitledBorder("New reservation:"));

        tableMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMemberMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableMember);

        tableProjection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableProjection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableProjectionMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableProjection);

        jLabel1.setText("Price:");

        jLabel2.setText("Discount:");

        jLabel3.setText("Discount price:");

        jLabel4.setText("Number of tickets:");

        txtDiscount.setEnabled(false);

        txtPrice.setEnabled(false);

        txtDiscountPrice.setEnabled(false);

        txtTickets.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTicketsKeyReleased(evt);
            }
        });

        jLabel5.setText("Projection:");

        jLabel6.setText("Member:");

        javax.swing.GroupLayout panelReservationLayout = new javax.swing.GroupLayout(panelReservation);
        panelReservation.setLayout(panelReservationLayout);
        panelReservationLayout.setHorizontalGroup(
            panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReservationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelReservationLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelReservationLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReservationLayout.createSequentialGroup()
                        .addGroup(panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDiscount)
                            .addComponent(txtPrice)
                            .addComponent(txtTickets)
                            .addComponent(txtDiscountPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReservationLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(panelReservationLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        panelReservationLayout.setVerticalGroup(
            panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReservationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDiscountPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(25, 25, 25)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(208, 208, 208))
        );

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnEdit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        Reservation r = validation();
        if (r == null) {
            return;
        }

        r.setId(reservation.getId());
        int totalScore = r.getMember().getTotalScore();
        int points = r.getProjection().getScore();
        r.getMember().setTotalScore(totalScore + points);


        if (!reservation.getProjection().equals(r.getProjection())) {
            int resetFreeSeats = reservation.getProjection().getFreeSeats() + reservation.getTickets();
            reservation.getProjection().setFreeSeats(resetFreeSeats);      
        }
        int freeSeats = r.getProjection().getFreeSeats();
        r.getProjection().setFreeSeats(freeSeats - r.getTickets());
            
        int score = reservation.getProjection().getScore();
        r.getMember().setTotalScore(r.getMember().getTotalScore() - score);

        Response res = Controler.getInstance().updateReservation(r);

        if (res.isStatus()) {
            Response res2 = Controler.getInstance().updateProjection(reservation.getProjection());

            if (res2.isStatus()) {
                JOptionPane.showMessageDialog(this, res.getMessage(), "Successful", JOptionPane.INFORMATION_MESSAGE);
                vrf.populateTable();
                vrf.setVisible(true);
                resetForm();
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, res.getMessage(), "Unsuccessful", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, res.getMessage(), "Unsuccessful", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void tableProjectionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProjectionMouseReleased

        double price = fillPrice();
        double discount = fillDiscount();

        if (price != 0) {
            fillDiscountPrice(price, discount);
        }
    }//GEN-LAST:event_tableProjectionMouseReleased

    private void tableMemberMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMemberMouseReleased
        double discount = fillDiscount();
        double price = fillPrice();

        if (price != 0) {
            fillDiscountPrice(price, discount);
        }
    }//GEN-LAST:event_tableMemberMouseReleased

    private void txtTicketsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTicketsKeyReleased

        if (txtTickets.getText().equals("")) {
            resetForm();
            return;
        }

        double discount = fillDiscount();
        double price = fillPrice();

        if (price != 0) {
            fillDiscountPrice(price, discount);
        }
    }//GEN-LAST:event_txtTicketsKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Reservation r = validation();
        if (r == null) {
            return;
        }

        int totalScore = r.getMember().getTotalScore();
        int points = r.getProjection().getScore();
        r.getMember().setTotalScore(totalScore + points);

        int freeSeats = r.getProjection().getFreeSeats();
        r.getProjection().setFreeSeats(freeSeats - r.getTickets());

        Response res = Controler.getInstance().saveReservation(r);

        if (res.isStatus()) {
            JOptionPane.showMessageDialog(this, res.getMessage(), "Successful", JOptionPane.INFORMATION_MESSAGE);
            resetForm();

            mf.setPanel(new ViewReservationForm(mf));
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, res.getMessage(), "Unsuccessful", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelReservation;
    private javax.swing.JTable tableMember;
    private javax.swing.JTable tableProjection;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtDiscountPrice;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtTickets;
    // End of variables declaration//GEN-END:variables

    private void setScreenCenter() {
        setLocationRelativeTo(null);
    }

    private void populateTableProjection() {
        List<Projection> list = Controler.getInstance().getProjections("");
        tmp = new TableModelProjection(list);
        tableProjection.setModel(tmp);
    }

    private void populateTableMember() {
        List<Member> list = Controler.getInstance().getMembers("");
        tmm = new TableModelMember(list);
        tableMember.setModel(tmm);
    }

    private void resetForm() {
        txtPrice.setText("");
        txtDiscount.setText("0");
        txtDiscountPrice.setText("");
        txtTickets.setText("");
    }

    private void adjustForm(FrmMode mode) {
        switch (mode) {
            case NEW:
                String title = "Add reservation:";
                border = BorderFactory.createTitledBorder(title);
                panelReservation.setBorder(border);
                btnSave.setVisible(true);
                btnEdit.setVisible(false);
                resetForm();
                break;
            case EDIT:
                title = "Edit reservation:";
                border = BorderFactory.createTitledBorder(title);
                panelReservation.setBorder(border);
                btnSave.setVisible(false);
                btnEdit.setVisible(true);
                break;
        }
    }

    void populateEditForm(Reservation r, ViewReservationForm vrf) {
        adjustForm(FrmMode.EDIT);
        this.reservation = r;
        this.vrf = vrf;

        txtPrice.setText(r.getPrice() + "");
        txtDiscount.setText(r.getDiscount() + "");
        txtDiscountPrice.setText(r.getDiscountPrice() + "%");
        txtTickets.setText(r.getTickets() + "");

        int select = tmp.getSelectedProjection(reservation.getProjection());
        tableProjection.setRowSelectionInterval(select, select);

        select = tmm.getSelectedMember(reservation.getMember());
        tableMember.setRowSelectionInterval(select, select);

    }

    private Reservation validation() {
        boolean valid = FormValidator.getInstance().validateEmpty(txtTickets);
        if (!valid) {
            JOptionPane.showMessageDialog(this, FormValidator.getInstance().getValidationMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        int tickets;

        try {
            tickets = Integer.parseInt(txtTickets.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Number of tickets need to be numeric values!");
            return null;
        }

        Projection p = new Projection();

        int row = tableProjection.getSelectedRow();

        if (tableProjection.getSelectedRowCount() == 1) {
            p = tmp.getProjection(tableProjection.getSelectedRow());
            if (p.getFreeSeats() == 0) {
                JOptionPane.showMessageDialog(this, "This projection is full, you need to choose another one.", "Error", JOptionPane.INFORMATION_MESSAGE);
                return null;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select one projection.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        Member m = new Member();
        row = tableMember.getSelectedRow();

        if (tableMember.getSelectedRowCount() == 1) {
            m = tmm.getMember(row);
        } else {
            JOptionPane.showMessageDialog(this, "Please select one member.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        double price = p.getPrice() * tickets;
        txtPrice.setText(price + "");
        double discount = m.getTotalScore();
        txtDiscount.setText(discount + "%");
        double discountPrice = price * (1 - (discount * 0.01));
        txtDiscountPrice.setText(discountPrice + "");

        Reservation r = new Reservation(-1, price, m.getTotalScore(), discountPrice, tickets, p, m);
        return r;
    }

    private double fillDiscount() {
        int row = tableMember.getSelectedRow();
        Member m;
        int score = 0;
        if (row != -1) {
            m = tmm.getMember(row);
            score = m.getTotalScore();
            txtDiscount.setText(score + "%");
        }
        return score;
    }

    private double fillPrice() {
        int tickets;
        try {
            tickets = Integer.parseInt(txtTickets.getText());
        } catch (Exception ex) {
            return 0;
        }

        int rowP = tableProjection.getSelectedRow();
        Projection p;
        double price = 0;
        if (rowP != -1) {
            p = tmp.getProjection(rowP);
            price = p.getPrice() * tickets;
            txtPrice.setText(price + "");
        }
        return price;

    }

    private void fillDiscountPrice(double price, double discount) {
        txtDiscountPrice.setText(price * (1 - discount * 0.01) + "");
    }
}
