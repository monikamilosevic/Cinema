/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.projection;

import controler.Controler;
import domain.Auditorium;
import domain.Movie;
import domain.Projection;
import form.projection.model.TableModelAuditorium;
import form.projection.model.TableModelMovie;
import form.FrmMode;
import form.MainForm;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import transfer.Response;
import transfer.util.Status;
import validator.FormValidator;

/**
 *
 * @author Monika
 */
public class ProjectionForm extends javax.swing.JDialog {

    Border border;
    TableModelMovie tmm;
    TableModelAuditorium tma;
    MainForm mf;
    FrmMode formMode;
    Projection projection;
    ViewProjectionForm vpf;

    /**
     * Creates new form ProjectionForm
     */
    public ProjectionForm(java.awt.Frame parent, boolean modal, FrmMode frmMode) {
        super(parent, modal);
        formMode = frmMode;
        mf = (MainForm) parent;
        initComponents();

        populateTableMovies();
        populateTableAuditorium();
        setScreenCenter();
        adjustForm(frmMode);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelProjection = new javax.swing.JPanel();
        lblDate = new javax.swing.JLabel();
        txtScore = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtFreeSeats = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSaveProjection = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Auditorium = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMovie = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAuditorium = new javax.swing.JTable();
        txtDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelProjection.setBorder(javax.swing.BorderFactory.createTitledBorder("Projection"));

        lblDate.setText("Date:");

        jLabel4.setText("Price:");

        jLabel2.setText("Free seats:");

        txtFreeSeats.setEnabled(false);

        jLabel1.setText("Score:");

        btnSaveProjection.setText("Save");
        btnSaveProjection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProjectionActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jLabel3.setText("Movie:");

        Auditorium.setText("Auditorium:");

        tableMovie.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableMovie);

        tableAuditorium.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableAuditorium.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableAuditoriumMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableAuditorium);

        javax.swing.GroupLayout panelProjectionLayout = new javax.swing.GroupLayout(panelProjection);
        panelProjection.setLayout(panelProjectionLayout);
        panelProjectionLayout.setHorizontalGroup(
            panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProjectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelProjectionLayout.createSequentialGroup()
                        .addComponent(btnSaveProjection, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Auditorium)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelProjectionLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(lblDate))
                .addGap(18, 18, 18)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPrice)
                    .addComponent(txtScore)
                    .addComponent(txtFreeSeats)
                    .addComponent(txtDate))
                .addContainerGap())
        );
        panelProjectionLayout.setVerticalGroup(
            panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProjectionLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFreeSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Auditorium)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelProjectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnSaveProjection))
                .addGap(259, 259, 259))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelProjection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelProjection, javax.swing.GroupLayout.PREFERRED_SIZE, 576, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveProjectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProjectionActionPerformed
        Projection p = validation();
        if (p == null) {
            return;
        }

        Response res = Controler.getInstance().saveProjection(p);

        if (res.isStatus()) {
            JOptionPane.showMessageDialog(this, res.getMessage(), "Successful", JOptionPane.INFORMATION_MESSAGE);
            resetForm();

            mf.setPanel(new ViewProjectionForm(mf));
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, res.getMessage(), "Unsuccessful", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveProjectionActionPerformed

    private void tableAuditoriumMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAuditoriumMouseReleased
        int[] rows = tableAuditorium.getSelectedRows();

        List<Auditorium> list = tma.getAuditoriums(rows);

        int capacity = 0;

        for (Auditorium a : list) {
            capacity += a.getCapacity();
        }

        txtFreeSeats.setText(capacity + "");
    }//GEN-LAST:event_tableAuditoriumMouseReleased

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        Projection p = validation();
        if (p == null) {
            return;
        }

        p.setId(projection.getId());

        for (Auditorium a : p.getAuditoriums()) {
            if (projection.getAuditoriums().contains(a)) {
                a.setStatus(Status.UPDATE);
            } else {
                a.setStatus(Status.NEW);
            }
        }

        for (Auditorium a : projection.getAuditoriums()) {
            if (p.getAuditoriums().contains(a)) {
                a.setStatus(Status.UPDATE);
            } else {
                a.setStatus(Status.DELETE);
                p.getAuditoriums().add(a);
            }
        }
        Response res = Controler.getInstance().updateProjection(p);

        if (res.isStatus()) {
            JOptionPane.showMessageDialog(this, res.getMessage(), "Successful", JOptionPane.INFORMATION_MESSAGE);
            resetForm();

            vpf.populateTable();
            vpf.setVisible(true);
            this.dispose();

        } else {
            JOptionPane.showMessageDialog(this, res.getMessage(), "Unsuccessful", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Auditorium;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSaveProjection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDate;
    private javax.swing.JPanel panelProjection;
    private javax.swing.JTable tableAuditorium;
    private javax.swing.JTable tableMovie;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtFreeSeats;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtScore;
    // End of variables declaration//GEN-END:variables

    private void setScreenCenter() {
        setLocationRelativeTo(null);
    }

    private void populateTableMovies() {
        List<Movie> list = Controler.getInstance().getMovies();

        tmm = new TableModelMovie(list);
        tableMovie.setModel(tmm);
    }

    private void populateTableAuditorium() {
        List<Auditorium> list = Controler.getInstance().getAuditoriums();

        tma = new TableModelAuditorium(list);
        tableAuditorium.setModel(tma);
    }

    private void resetForm() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy. HH:mm");

        txtDate.setText(sdf.format(new Date()));
        txtFreeSeats.setText("");
        txtPrice.setText("");
        txtScore.setText("");
    }

    private void adjustForm(FrmMode mode) {

        switch (mode) {
            case NEW:
                String title = "Add projection:";
                border = BorderFactory.createTitledBorder(title);
                panelProjection.setBorder(border);
                btnSaveProjection.setVisible(true);
                btnEdit.setVisible(false);
                resetForm();

                break;
            case EDIT:
                title = "Edit projection:";
                border = BorderFactory.createTitledBorder(title);
                panelProjection.setBorder(border);
                btnSaveProjection.setVisible(false);
                btnEdit.setVisible(true);
                break;

        }
    }

    void populateEditForm(Projection p, ViewProjectionForm vpf) {
        adjustForm(FrmMode.EDIT);
        this.projection = p;
        this.vpf = vpf;

        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy. HH:mm");

        txtDate.setText(sdf.format(p.getDate()));
        txtPrice.setText(p.getPrice() + "");
        txtFreeSeats.setText(p.getFreeSeats() + "");
        txtScore.setText(p.getScore() + "");

        int select = tmm.getSelectedMovie(projection.getMovie());
        tableMovie.setRowSelectionInterval(select, select);

        for (Auditorium a : projection.getAuditoriums()) {
            select = tma.getSelectedAuditorium(a);
            tableAuditorium.getSelectionModel().addSelectionInterval(select, select);
        }

    }

    private Projection validation() {
        boolean valid = FormValidator.getInstance().validateEmpty(txtPrice, txtScore);
        if (!valid) {
            JOptionPane.showMessageDialog(this, FormValidator.getInstance().getValidationMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        double price;
        int score;
        int freeSeats;
        try {
            price = Double.parseDouble(txtPrice.getText());
            score = Integer.parseInt(txtScore.getText());

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Price and score need to be numeric values!");
            return null;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy. HH:mm");
        Date date;
        try {
            date = sdf.parse(txtDate.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Date of the projection has to be in right format!");
            return null;
        }

        if (date.before(new Date())) {
            JOptionPane.showMessageDialog(null, "You need to choose a date that is after current date.");
            return null;
        }

        Movie m = new Movie();

        int[] row = tableMovie.getSelectedRows();

        if (tableMovie.getSelectedRowCount() == 1) {

            m = tmm.getMovie(tableMovie.getSelectedRow());

        } else {
            JOptionPane.showMessageDialog(this, "Please select one movie.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        List<Auditorium> list = new ArrayList<>();
        int[] rows = tableAuditorium.getSelectedRows();

        if (rows.length != 0) {

            list = tma.getAuditoriums(rows);

            int capacityNew = 0;

            for (Auditorium a : list) {
                capacityNew += a.getCapacity();
            }
            freeSeats = capacityNew;
            
            if (formMode.equals(FrmMode.EDIT)) {
                int capacity = 0;
                for (Auditorium a : projection.getAuditoriums()) {
                    capacity += a.getCapacity();
                }

                freeSeats = capacityNew - (capacity - projection.getFreeSeats());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select auditoriums.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        int dialogResult = JOptionPane.showConfirmDialog(this, "Is " + sdf.format(date) + " the right date?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (dialogResult != JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "Choose the date again.");
            return null;
        }

        Projection p = new Projection(-1, date, price, score, freeSeats, m, list);
        return p;
    }

}
